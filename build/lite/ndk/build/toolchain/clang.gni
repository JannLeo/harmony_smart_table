# Copyright (c) 2020 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ohos_build_compiler = "clang"
ohos_build_compiler_dir = rebase_path("//llvm/bin", root_build_dir)
ohos_build_compiler_prefix = "clang"
ohos_build_compiler_so_strip = "llvm-objcopy --strip-all"
ohos_build_compiler_bin_strip = "llvm-objcopy --strip-all"

template("clang_toolchain") {
    toolchain(target_name) {
        assert(defined(invoker.cc), "clang toolchain must specify a \"cc\" value")
        assert(defined(invoker.cxx), "clang toolchain must specify a \"cxx\" value")
        assert(defined(invoker.ar), "clang toolchain must specify a \"ar\" value")
        assert(defined(invoker.as), "clang toolchain must specify a \"as\" value")
        assert(defined(invoker.ld), "clang toolchain must specify a \"ld\" value")

        cc = invoker.cc
        cxx = invoker.cxx
        ar = invoker.ar
        as = invoker.as
        ld = invoker.ld

        need_strip = false
        if(defined(invoker.strip)) {
            strip = invoker.strip
            need_strip = true
        }

        tool("cc") {
            command = "$cc {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "clang {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.o",
            ]
        }
        tool("cxx") {
            depfile = "{{output}}.d"
            command = "$cxx {{defines}} {{include_dirs}} {{cflags_cc}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "clang++ {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.o",
            ]
        }
        tool("asm") {
            depfile = "{{output}}.d"
            command = "$as {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "ASM {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.o",
            ]
        }
        tool("alink") {
            outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$ar -r {{output}} @\"$rspfile\""
            description = "AR {{output}}"
            outputs = [
                outfile,
            ]
            default_output_dir = "{{root_out_dir}}/libs"
            default_output_extension = ".a"
            output_prefix = "lib"
        }
        tool("solink") {
            outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            rspfile = "$outfile.rsp"
            rspfile_content = "{{inputs}}"
            command = "$ld -shared {{ldflags}} {{inputs}} -o $outfile"
            if (need_strip) {
                unstripped_outfile = outfile
                command += " && $strip" + " \"$unstripped_outfile\" \"$outfile\""
            }
            default_output_extension = ".so"
            description = "SOLINK $outfile"
            default_output_dir = "{{root_out_dir}}"
            output_prefix = "lib"
            outputs = [
                outfile
            ]
        }
        tool("link") {
            outfile = "bin/{{target_output_name}}{{output_extension}}"
            rspfile = "$outfile.rsp"
            custom_ld_flags = " "
            command = "$cc {{ldflags}} {{inputs}} $custom_ld_flags -o $outfile"
            if (need_strip) {
                command += " && $strip $outfile"
            }

            description = "LLVM LINK $outfile"
            default_output_dir = "{{root_out_dir}}/bin"
            rspfile_content = "{{inputs}}"
            outputs = [
                outfile
            ]
        }
        tool("stamp") {
            if (host_os == "win") {
                command = "cmd /c type nul > \"{{output}}\""
            } else {
                command = "/usr/bin/touch {{output}}"
            }
            description = "STAMP {{output}}"
        }

        tool("copy") {
            command = "cp -afd {{source}} {{output}}"
            description = "COPY {{source}} {{output}}"
        }
    }
}